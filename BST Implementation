class TreeNode {
    int val;
    TreeNode left, right;

    TreeNode(int x) {
        val = x;
        left = right = null;
    }
}

public class BSTExample {
    public static void main(String[] args) {
        TreeNode root = null;
        BSTExample bst = new BSTExample();

        root = bst.insert(root, 50);
        root = bst.insert(root, 30);
        root = bst.insert(root, 20);
        root = bst.insert(root, 40);
        root = bst.insert(root, 70);
        root = bst.insert(root, 60);
        root = bst.insert(root, 80);

        System.out.print("InOrder traversal: ");
        bst.inOrder(root);
        System.out.println();

        System.out.print("PreOrder traversal: ");
        bst.preOrder(root);
        System.out.println();

        System.out.print("PostOrder traversal: ");
        bst.postOrder(root);
        System.out.println();

        System.out.println("Deleting 20");
        root = bst.deleteNode(root, 20);
        System.out.print("InOrder traversal after deletion: ");
        bst.inOrder(root);
        System.out.println();

        TreeNode found = bst.search(root, 30);
        if (found != null)
            System.out.println("Node 30 found in the tree.");
        else
            System.out.println("Node 30 not found in the tree.");
    }

    // Insert method
    TreeNode insert(TreeNode root, int key) {
        if (root == null) {
            root = new TreeNode(key);
            return root;
        }
        if (key < root.val)
            root.left = insert(root.left, key);
        else if (key > root.val)
            root.right = insert(root.right, key);
        return root;
    }

    // Search method
    TreeNode search(TreeNode root, int key) {
        if (root == null || root.val == key)
            return root;
        if (key < root.val)
            return search(root.left, key);
        return search(root.right, key);
    }

    // Delete method
    TreeNode deleteNode(TreeNode root, int key) {
        if (root == null) return root;
        if (key < root.val)
            root.left = deleteNode(root.left, key);
        else if (key > root.val)
            root.right = deleteNode(root.right, key);
        else {
            if (root.left == null)
                return root.right;
            else if (root.right == null)
                return root.left;
            root.val = minValue(root.right);
            root.right = deleteNode(root.right, root.val);
        }
        return root;
    }

    // Helper method to find the minimum value node
    int minValue(TreeNode root) {
        int minv = root.val;
        while (root.left != null) {
            minv = root.left.val;
            root = root.left;
        }
        return minv;
    }

    // InOrder traversal method
    void inOrder(TreeNode root) {
        if (root != null) {
            inOrder(root.left);
            System.out.print(root.val + " ");
            inOrder(root.right);
        }
    }

    // PreOrder traversal method
    void preOrder(TreeNode root) {
        if (root != null) {
            System.out.print(root.val + " ");
            preOrder(root.left);
            preOrder(root.right);
        }
    }

    // PostOrder traversal method
    void postOrder(TreeNode root) {
        if (root != null) {
            postOrder(root.left);
            postOrder(root.right);
            System.out.print(root.val + " ");
        }
    }
}
